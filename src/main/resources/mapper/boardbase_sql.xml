<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardbase_sql">
	
	<select id="select_all" resultType="boardbase" parameterType="boardbase">
		SELECT 
			board.id, 
			board.creatorId,
			user.name as writerName,
			user.profileUrl as profileUrl, 
			user.kImageUrl as kImageUrl, 
			user.patientId as patientId,
			user.userType as userType,
			user.userLevel as userLevel,
			user.position as position,
			board.text, 
			board.createdTime,
			board.updatedTime,
			board.patientId,
			board.status,
			board.type,
			board.expireDate,
			board.accessLevel,
			board.groupId,
			(SELECT count(*) FROM Board_reply reply WHERE reply.boardId = board.id) AS replyCount,
			CASE
	        WHEN photo.id IS NULL THEN NULL
	        ELSE CONCAT('[',
	             		  GROUP_CONCAT(CONCAT('{ "id":',
                            photo.id,
                            ',"boardId":',
                            photo.boardId,
                            ',"caption":"',
                            REPLACE(photo.caption, '"', '\"'),
                            '","photoId":',
                            photo.photoId,
                            ' }')),
                ']')
    		END photoList
			
		FROM Board_main board
		
		LEFT JOIN Person AS user ON user.NUM = board.creatorId
		LEFT JOIN Board_photo photo ON photo.boardId = board.id
		<where>
			${userLevel} >= board.accessLevel
			AND 
				(board.groupId IN (SELECT groupUser.groupId FROM Group_user groupUser WHERE groupUser.userId = ${userId}) 
				OR
				board.status = '3')
		</where>
		GROUP BY board.id
		ORDER BY board.createdTime DESC
		
		limit ${from}, ${pageSize}
		
		
	</select>
	
	<select id="select_one" parameterType="boardbase" resultType="boardbase">
		select 
			board.id, 
			board.creatorId,
			user.name as writerName,
			user.profileUrl as profileUrl, 
			user.kImageUrl as kImageUrl, 
			user.patientId as patientId,
			user.userType as userType,
			user.userLevel as userLevel,
			user.position as position,
			board.text, 
			board.createdTime,
			board.updatedTime,
			board.patientId,
			board.status,
			board.type,
			board.expireDate,
			board.accessLevel,
			board.groupId,
			Count(reply.id) AS replyCount,
			CASE
	        WHEN photo.id IS NULL THEN NULL
	        ELSE CONCAT('[',
	             		  GROUP_CONCAT(CONCAT('{ "id":',
                            photo.id,
                            ',"boardId":',
                            photo.boardId,
                            ',"caption":"',
                            REPLACE(photo.caption, '"', '\"'),
                            '","photoId":',
                            photo.photoId,
                            ' }')),
                ']')
    		END photoList
    		
		from Board_main board
		LEFT JOIN Board_reply AS reply ON reply.boardId = board.id
		LEFT JOIN Person AS user ON user.NUM = board.creatorId
		LEFT JOIN Board_photo photo ON photo.boardId = board.id
		
		<where>
			board.id = ${id}
		</where>
		GROUP BY board.id
	</select>
	
	<select id="count" parameterType="boardbase" resultType="int">
		select
			count(*)
		FROM Board_main board

		LEFT JOIN Person AS user ON user.NUM = board.creatorId
		<where>
			${userLevel} >= board.accessLevel
		</where>
	</select>
	
	<insert id="insert" parameterType="boardbase" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO Board_main 
			(creatorId, patientId, status, text, type, accessLevel, groupId)
		values
			(${creatorId}, ${patientId}, ${status}, '${text}', ${type}, ${accessLevel}, ${groupId})
	</insert>
	
	<delete id="delete" parameterType="boardbase">
		delete from Board_main
		where id = ${id}
	</delete>
</mapper>
